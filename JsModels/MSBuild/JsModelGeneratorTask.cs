using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace JsModels.MSBuild
{
    public class JsModelGeneratorTask : Task
    {
        [Required]
        public string InputAssembly { get; set; }

        [Required]
        public string Classes { get; set; }

        [Required]
        public string OutputDirectory { get; set; }

        public override bool Execute()
        {
            if (string.IsNullOrWhiteSpace(Classes))
            {
                Log.LogError("The 'Classes' property must be set for JsModelGeneratorTask. Consider using the <JsModelsClasses> property group in your MSBuild project file to specify the classes.");
                return false;
            }
            try
            {
                if (!Directory.Exists(OutputDirectory))
                    Directory.CreateDirectory(OutputDirectory);

                var assembly = Assembly.LoadFile(InputAssembly);
                var names = Classes.Split(',').Select(n => n.Trim()).ToList();
                var models = new List<Type>();
                foreach (var name in names)
                {
                    var model = assembly.GetType(name);
                    if (model == null)
                    {
                        var lower = name.ToLower();
                        var results = assembly.GetTypes().Where(t => t.Name.ToLower() == lower).ToList();
                        if (!results.Any() || results.Count > 1)
                        {
                            Log.LogError($"Could not find unique model by name: {name}");
                            return false;
                        }
                        model = results.First();
                    }
                    models.Add(model);
                }

                if (!models.Any())
                {
                    Log.LogError("No models found.");
                    return false;
                }

                var generator = new JsModelGenerator(models);

                foreach (var model in models)
                {
                    var filename = Path.Combine(OutputDirectory, $"{model.Name}.js");
                    using (var writer = new StreamWriter(filename, false))
                    {
                        writer.WriteLine("// This file autogenerated by JsModels");
                        generator.GenerateModel(model, writer);
                        writer.Flush();
                    }
                    Log.LogMessage(MessageImportance.High, $"Generated {filename}");
                }

                return true;
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex, true);
                return false;
            }
        }
    }
}